# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    - avoid_unused_constructor_parameters
    - prefer_iterable_whereType
    - curly_braces_in_flow_control_structures
    - avoid_empty_else
    - avoid_slow_async_io
    - cancel_subscriptions

    - control_flow_in_finally
    - empty_statements
    - hash_and_equals

    - iterable_contains_unrelated_type
    - list_remove_unrelated_type

    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - test_types_in_equals
    - throw_in_finally
    - unrelated_type_equality_checks
    - valid_regexps

    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_require_non_null_named_parameters

    - annotate_overrides
    - use_function_type_syntax_for_parameters

    - avoid_init_to_null
    - avoid_null_checks_in_equality_operators

    - avoid_return_types_on_setters

    - await_only_futures
    - camel_case_types
    - cascade_invocations

    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - implementation_imports
    - join_return_with_assignment
    - library_names
    - library_prefixes
    - non_constant_identifier_names

    - overridden_fields
    - package_api_docs
    - package_prefixed_library_names

    - prefer_adjacent_string_concatenation
    - prefer_single_quotes
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors

    - prefer_contains
    - prefer_equal_for_default_values

    - prefer_initializing_formals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_void_to_null

    - slash_for_doc_comments
    - sort_constructors_first
    - sort_unnamed_constructors_first

    - type_annotate_public_apis
    - type_init_formals

    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_getters_setters

    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators

    - unnecessary_statements
    - unnecessary_this
    - use_rethrow_when_possible

    - package_names
